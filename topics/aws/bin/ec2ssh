#!/usr/bin/env bash
set -e

function usage() {
    cat<<EOF
Usage: ec2ssh [-r REGION] [-j JUMP] [-t TAG] <TARGET>

Open an ssh connection to EC2 instance named <TARGET>

If more than one instance begins with <TARGET> then you will be prompted
to pick from the available instances

  -h              Display help
  -r, REGION      EC2 Region, defaults to us-east-1
  -t, TAG         Resolve instances with tag, defaults to Name
  -l              List hosts
  -j, JUMP        Jump host (optional)
  -L, FWD         Port forwarding - format port:host:host_port (if jump, proxies through JUMP_FWD)
  -F, JUMP_FWD    Port to use on jump host, defaults to 9999
  -p  TARGET      Output transform for target
  -d              Dry run of command

Examples:

  ec2ssh -j jump-123 server-456 
     ssh through server named "jump-123" to EC2 instance starting with "server-456"

  ec2ssh -j jump-123 server-456 -F 7001 -L 7000:127.0.0.1:3000
     ssh tunnel with port forwarding from localhost:7000 -> jump-123 -> server-456:3000

EOF
}

##########################################################
# Helper functions
##########################################################
function list {
  extras=""
  add_filter "Name=tag:${tag},Values=${target}*"
  if [[ "${tag}" != "Name" ]]; then
    extras=",${tag}:Tags[?Key==\`${tag}\`] | [0].Value"
  fi

  aws ec2 describe-instances \
    --region=${region} \
    ${filters} \
    --query "sort_by(Reservations[].Instances[].{InstanceId:InstanceId,Name:Tags[?Key==\`Name\`] | [0].Value,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,VPC:VpcId${extras}}, &Name)" \
    --output=table
}

function get_ip {
  instance=${1}
  type=${2}
  aws ec2 describe-instances \
    --region=${region} \
    --query "Reservations[0].Instances[0].${type}IpAddress" \
    --filter "Name=tag:${tag},Values=${instance}*" "Name=instance-state-name,Values=pending,running,shutting-down,stopping"
}

function get_instances {
  instance=${1}
  type=${2}
  aws ec2 describe-instances \
    --region=${region} \
    --query "sort_by(Reservations[].Instances[].{IP:${type}IpAddress,Name:Tags[?Key==\`${tag}\`].Value | [0]}, &Name)" \
    --filter "Name=tag:${tag},Values=${instance}*" "Name=instance-state-name,Values=pending,running,shutting-down,stopping" \
    --output=text
}

function transform_host {
    hostparts=(${1/@/ })
    user="${hostparts[0]}"
    instance="${hostparts[1]}"
    type=${2}

    if [ -z "${instance}" ]; then
        instance=${user}
        user=""
    fi

    if [[ ${instance} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        # if it looks like an ip address...
        ipaddr=${instance}
    else
        ipaddr=`get_ip ${instance} ${type}`
        ipaddr=${ipaddr//\"}
        if [ "null" = "${ipaddr}" ]; then
          echo ${1}
          exit
        fi
        if [ -z "${ipaddr}" ]; then
           die "Failed to find instance tagged ${tag}:${instance} in ${region}"
        fi
    fi

    if [ -z "${user}" ]; then
        echo "${ipaddr}"
    else
        echo "${user}@${ipaddr}"
    fi
}

function add_filter {
  if [[ "${filters}" -eq "" ]]; then
    filters="--filters "
  fi
  filters="${filters}${1}"
}

function die {
    echo >&2 $1
    exit 1
}

##########################################################
# Check for dependencies
##########################################################
type ssh >/dev/null 2>&1 || die "ssh is required, but can't be found."
type awk >/dev/null 2>&1 || die "awk is required, but can't be found."
type grep >/dev/null 2>&1 || die "grep is required, but can't be found."
type aws >/dev/null 2>&1 || die "AWS CLI is required, but it is not installed."

##########################################################
# Runtime variables
##########################################################
tag="Name"
region="us-east-1"
jump=""
target=""
proxy=""
jump_port="9999"
filters=""

CMD=""
DRY_RUN=false

##########################################################
# Parse arguments
##########################################################

# parse options (and capture command for out of order)
while test $# != 0; do
    case "$1" in
        -d) DRY_RUN=true;;
        -h) CMD=$1;;
        -l) CMD=$1;;
        -p) CMD=$1;;
        -r) region=$2; shift;;
        -j) jump=$2; shift;;
        -t) tag=$2; shift;;
        -L)
          proxy=(${2//:/ });
          if [ ${#proxy[@]} != 3 ]; then
            >&2 echo "ERROR: proxy port format must be [port]:[host]:[hostport]"
            usage
            exit 1
          fi
          shift
          ;;
        -F) jump_port=$2; shift;;
        *)  target=$1
    esac
    shift
done

# target agnostic commands
case "${CMD}" in
  -h) usage; exit;;
  -l) list; exit;;
esac

# ensure we have a target now
if [ -z "${target// }" ]; then
    usage
    exit 1
fi

##########################################################
# Transform target for multiple matches
##########################################################
# determine number of instances that matches the target, using jump to determine public or private ip
instances=
if [ -z "${jump}" ]; then
    instances=$(get_instances ${target} "Public")
else
    instances=$(get_instances ${target} "Private" | grep -v ${jump})
fi

target_name=${target}
count=$(echo "${instances}" | wc -l)
if [[ "${count}" -eq 0 ]]; then
    # no matching instances of target, fail
    echo "Didn't find instance ${target}"
    exit 1
elif [[ "${count}" -eq 1 ]]; then
    # only one matching target, capture ip and move on
    target=$(echo "${instances}" | cut -f1)
    target_name=$(echo "${instances}" | cut -f2)
else
    # print matching instance names and allow user to specify the choice by index
    echo "${instances}" | cut -f2 | awk '{printf "%d) %s\n", NR, $0}'
    read -p "pick (1): " pick

    # if nothing was chosen default pick to first match
    if [[ "${pick}" -eq "" ]]; then
      pick=1
    fi

    # ensure pick is within the valid range
    if [[ "${pick}" -lt 1 || "${pick}" -gt "${count}" ]]; then
        echo "Invalid pick"
        exit 1
    fi

    # capture ip of target for use later
    target=$(echo "${instances}" | cut -f1 | sed -n "${pick}"p)
    target_name=$(echo "${instances}" | cut -f2 | sed -n "${pick}"p)
fi

##########################################################
# Target specific commands
##########################################################
case "${CMD}" in
    -p)
        add_filter "Name=tag:${tag},Values=${target_name}"
        list
        exit;;
    '');; # no command falls through to ssh
    *) echo "Unhandled command: ${CMD}"; exit 1;;
esac

cmd='ssh'

##########################################################
# Connect to target
##########################################################
# transform proxy name to ip
if [ -n "${proxy[1]}" ]; then
  proxy[1]=`transform_host "${proxy[1]}" "Private"`
fi

# if no jump server, use public ip of target
if [ -z "${jump}" ]; then
    public=`transform_host "${target}" "Public"`
    if [ -z "${proxy}" ]; then
      cmd="${cmd} ${public}"
    else
      cmd="${cmd} -L ${proxy[0]}:${proxy[1]}:${proxy[2]} ${public}"
    fi
else
    # there is a jump server, use public ip jump host and private ip of target host
    public=`transform_host "${jump}" "Public"`
    private=`transform_host "${target}" "Private"`
    if [ -z "${proxy}" ]; then
      cmd="${cmd} -A -t ${public} ssh -A ${private}"
    else
      cmd="${cmd} -A -L ${proxy[0]}:localhost:${jump_port} -t ${public} ssh -A -L ${jump_port}:${proxy[1]}:${proxy[2]} ${private}"
    fi
fi

echo "executing: ${cmd}"
if [[ ${DRY_RUN} == false ]]; then
  ${cmd}
fi
