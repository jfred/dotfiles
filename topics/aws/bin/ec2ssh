#!/usr/bin/env sh
set -e

function usage() {
    cat<<EOF
Usage: ec2ssh [-r REGION] [-j JUMP] [-t TAG] <TARGET>

Open an ssh connection to EC2 instance named <TARGET>

  -h              Display help
  -r, REGION      EC2 Region, defaults to us-east-1
  -t, TAG         Resolve insances with tag, defaults to Name
  -l              List hosts
  -lv             List VPCs
  -v, VPC_ID      Limit to one VPC
  -j, JUMP        Jump host (optional)
  -L, FWD         Port forwarding - format port:host:hostport (if jump, proxies through JUMP_FWD)
  -F, JUMP_FWD    Port to use on jump host, defaults to 9999    
  -p  TARGET      Output transform for target
EOF
}

function list {
  aws ec2 describe-instances \
    --region=${region} \
    ${filters} \
    --query "sort_by(Reservations[].Instances[].{InstanceId:InstanceId,${tag}:Tags[?Key==\`${tag}\`] | [0].Value,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,VPC:VpcId}, &${tag})" \
    --output=table
}

function list_vpc {
  aws ec2 describe-vpcs \
    --region=${region} \
    --query "sort_by(Vpcs[].{VpcId:VpcId,Name:(Tags[?Key==\`Name\`]) | [0].Value,VpcId:VpcId }, &Name)" \
    --output=table
}

function add_filter {
  if [[ "${filters}" -eq "" ]]; then
    filters="--filters "
  fi
  filters="${filters}${1}"
}

function die {
    echo >&2 $1
    exit 1
}

type aws >/dev/null 2>&1 || die "AWS CLI is required, but it is not installed."

tag="Name"
region="us-east-1"
jump=""
target=""
proxy=""
jump_port="9999"
filters=""

CMD=""

# parse options (and capture command for out of order)
while test $# != 0; do
    case "$1" in
        -h) CMD=$1;;
        -l) CMD=$1;;
        -lv) CMD=$1;;
        -p) CMD=$1;;
        -r) region=$2; shift;;
        -j) jump=$2; shift;;
        -t) tag=$2; shift;;
        -v)
          add_filter "Name=vpc-id,Values=$2"
          shift;;
        -L)
          proxy=(${2//:/ }); 
          if [ ${#proxy[@]} != 3 ]; then
            >&2 echo "ERROR: proxy port format must be [port]:[host]:[hostport]"
            usage
            exit 1
          fi
          shift
          ;;
        -F) jump_port=$2; shift;;
        *)  target=$1
    esac
    shift
done

function transform_host {
    hostparts=(${1/@/ })
    user="${hostparts[0]}"
    instance="${hostparts[1]}"

    if [ -z "${instance}" ]; then
        instance=${user}
        user=""
    fi
  
    if [[ ${instance} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        # if it looks like an ip address...
        ipaddr=${instance}
    else
        ipaddr=`aws ec2 describe-instances --region=${region} --query "Reservations[0].Instances[0].${2}IpAddress" --filter "Name=tag:${tag},Values=${instance}*" "Name=instance-state-name,Values=pending,running,shutting-down,stopping"`
        ipaddr=${ipaddr//\"}
        if [ "null" = "${ipaddr}" ]; then
          echo ${1}
          exit
        fi
        if [ -z "${ipaddr}" ]; then
           die "Failed to find instance tagged ${tag}:${instance} in ${region}"
        fi
    fi

    if [ -z "${user}" ]; then
        echo "${ipaddr}"
    else
        echo "${user}@${ipaddr}"
    fi
}

case "${CMD}" in
  -p) echo `transform_host ${target}`; exit;;
  -l) list; exit;;
  -lv) list_vpc; exit;;
  '');;
  *) echo "Undandled command: ${CMD}"; exit 1;;
esac

if [ -z "${target// }" ]; then
    usage
    exit 1
fi

cmd='ssh'

if [ -n "${proxy[1]}" ]; then
  proxy[1]=`transform_host "${proxy[1]}" "Private"`
fi

if [ -z "${jump}" ]; then
    public=`transform_host "${target}" "Public"`
    if [ -z "${proxy}" ]; then
      cmd="${cmd} ${public}"
    else
      cmd="${cmd} -L ${proxy[0]}:${proxy[1]}:${proxy[2]} ${public}"
    fi
else
    public=`transform_host "${jump}" "Public"`
    private=`transform_host "${target}" "Private"`
    if [ -z "${proxy}" ]; then
      cmd="${cmd} -A -t ${public} ssh -A ${private}"
    else
      cmd="${cmd} -A -L ${proxy[0]}:localhost:${jump_port} -t ${public} ssh -A -L ${jump_port}:${proxy[1]}:${proxy[2]} ${private}"
    fi
fi

echo "executing: ${cmd}"
${cmd}
