#!/usr/bin/env bash
set -e

source "$(dirname "$0")/ec2util"

function usage() {
  cat<<EOF
Usage: ec2scp [-r REGION] [-J JUMP] [-t TAG] <TARGET>:<PATH> <LOCAL_PATH>

Copy <PATH> via scp from EC2 instance named <TARGET> to <LOCAL_PATH>

If more than one instance begins with <TARGET> then you will be prompted
to pick from the available instances

  -c             Force cache population
  -h             Display help
  -r REGION      EC2 Region, defaults to us-east-1
  -t TAG         Resolve instances with tag, defaults to Name
  -J JUMP        Jump host (optional)
  -L FWD         Port forwarding - format port:host:host_port (if jump, proxies through JUMP_FWD)
  -F JUMP_FWD    Port to use on jump host, defaults to 9999
  -d             Dry run of command

Examples:

  ec2scp -J jump-123 server-456:some-file /tmp/some-file
     scp some-file through server named "jump-123" from EC2 instance starting with "server-456" to /tmp/some-file

EOF
}

##########################################################
# Check for dependencies
##########################################################
type scp >/dev/null 2>&1 || die "ERROR: scp is required, but can't be found."
type sed >/dev/null 2>&1 || die "ERROR: sed is required, but can't be found."


##########################################################
# Runtime variables
##########################################################
tag="Name"
jump=""
target=""
filters=""
src=""
dst=""

CMD=""
DRY_RUN=false

# parse options (and capture command for out of order)
while test $# != 0; do case "$1" in
  -d) DRY_RUN=true;;
  -c) CMD=$1;;
  -h) CMD=$1;;
  -r) set_region $2; shift;;
  -J) jump=$2; shift;;
  -t) tag=$2; shift;;
  *)
    if [ -z "${src}" ]; then
      src=${1}
    else
      if [ -z "${dst}" ]; then
        dst=${1}
      fi
    fi
  esac
  shift
done


# target agnostic commands
case "${CMD}" in
  -c) populate_cache; exit;;
  -h) usage; exit;;
esac

# ensure we have a target now
if [ -z "${src}" ] || [ -z "${dst}" ]; then
  usage
  die
fi

if [[ ! "${src}" =~ ^[^:]{1,}:.{1,}$ ]]; then
  die "<TARGET>:<PATH> not in the right form"
fi

target=$(echo ${src} | sed "s/:.*//g")
path=$(echo ${src} | sed "s/.*://")

init_cache

##########################################################
# Target specific commands
##########################################################
if [[ ! -z "${jump}" ]]; then
    find_target "${jump}"
    jump=${found_target}
fi
find_target "${target}"
target=${found_target}


cmd='scp'

# if no jump server, use public ip of target
if [ -z "${jump}" ]; then
  public=`transform_host "${target}" "Public"`
  cmd="${cmd} ${public}:${path} ${dst}"
else
  public=`transform_host "${jump}" "Public"`
  private=`transform_host "${target}" "Private"`
  cmd="${cmd} -J ${public} ${private}:${path} ${dst}"
fi

echo "executing: ${cmd}"
if [[ ${DRY_RUN} == false ]]; then
  ${cmd}
fi

