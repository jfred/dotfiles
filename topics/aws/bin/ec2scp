#!/usr/bin/env bash
set -e

source "$(dirname "$0")/ec2util"

function usage() {
  cat<<EOF
Usage: ec2scp [-r REGION] [-J JUMP] [-t TAG] [SOURCE] [DESTINATION]

Copy via scp from SOURCE to DESTINATION.

SOURCE and DESTINATION can be in one of the following forms:
- local path - e.g. /some/local/path
- remote path - e.g. servername:/some/remote/path

If more than one instance begins with <TARGET> then you will be prompted
to pick from the available instances

  -c             Force cache population
  -h             Display help
  -r REGION      EC2 Region, defaults to us-east-1
  -t TAG         Resolve instances with tag, defaults to Name
  -J JUMP        Jump host (optional)
  -d             Dry run of command

Examples:

  ec2scp -J jump-123 server-456:some-file /tmp/some-file
     scp some-file through server named "jump-123" from EC2 instance starting with "server-456" to /tmp/some-file

  ec2scp -J jump-123 /tmp/some-file server-456:some-file
     scp /tmp/some-file through server named "jump-123" to EC2 instance starting with "server-456"

EOF
}

##########################################################
# Check for dependencies
##########################################################
type scp >/dev/null 2>&1 || die "ERROR: scp is required, but can't be found."
type sed >/dev/null 2>&1 || die "ERROR: sed is required, but can't be found."


##########################################################
# Runtime variables
##########################################################
tag="Name"
jump_tag="Name"
src_tag="Name"
dst_tag="Name"
jump=""
target=""
src=""
dst=""

CMD=""
DRY_RUN=false

# parse options (and capture command for out of order)
while test $# != 0; do case "$1" in
  -d) DRY_RUN=true;;
  -c) CMD=$1;;
  -h) CMD=$1;;
  -r) set_region $2; shift;;
  -J) jump=$2; jump_tag=${tag}; shift;;
  -t) tag=$2; shift;;
  *)
    if [ -z "${src}" ]; then
      src=${1}
      src_tag=${tag}
    else
      if [ -z "${dst}" ]; then
        dst=${1}
        dst_tag=${tag}
      fi
    fi
  esac
  shift
done


# target agnostic commands
case "${CMD}" in
  -c) populate_cache; exit;;
  -h) usage; exit;;
esac

# ensure we have a target now
if [ -z "${src}" ] || [ -z "${dst}" ]; then
  usage
  die
fi

#if [[ ! "${src}" =~ ^[^:]{1,}:.{1,}$ ]]; then
#  die "<TARGET>:<PATH> not in the right form"
#fi

init_cache

transform_type="Public"
transformed_loc=""
function transform_loc() {
  local target path
  transformed_loc=""
  if [[ "$1" =~ .*":".* ]]; then
    # shellcheck disable=SC2001
    target=$(echo ${1} | sed "s/:.*//g")
    # shellcheck disable=SC2001
    path=$(echo ${1} | sed "s/.*://")
    find_target "${target}"
    target=${found_target}

    target=$(transform_host "${target}" "${transform_type}")
    transformed_loc=${target}:${path}

    # set user is specified
    if [ -n "${EC2_USER}" ]; then
      transformed_loc="${EC2_USER}@${transformed_loc}"
    fi

  else
    transformed_loc=$1
  fi
}

##########################################################
# Target specific commands
##########################################################
cmd='scp'

if [[ ! -z "${jump}" ]]; then
  # get jump
  tag=${jump_tag}
  find_target "${jump}"
  jump=${found_target}
  jump=`transform_host "${jump}" "Public"`

  # set user is specified
  if [ -n "${EC2_USER}" ]; then
    jump="${EC2_USER}@${jump}"
  fi

  # set transform to private and transform
  transform_type="Private"
  cmd="${cmd} -J ${jump}"
fi

tag=${src_tag}
transform_loc "${src}"
src=${transformed_loc}
tag=${dst_tag}
transform_loc "${dst}"
dst=${transformed_loc}
cmd="${cmd} ${src} ${dst}"

echo "executing: ${cmd}"
if [[ ${DRY_RUN} == false ]]; then
  ${cmd}
fi
