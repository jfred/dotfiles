# uncomment for profiling - makesure to uncomment the last line as well
#zmodload zsh/zprof

# Override in ~/.localrc to disable modules
# The following example would disable java and vagrant
#     DOT_EXCLUDE='(java|vagrant)' 
DOT_EXCLUDE='_no_matches_'
# number of milliseconds a source can run before warning would be printed
WARN_THRESHOLD=30

# Terminal color profile helpers
declare -A tmux_profile_fgmap
declare -A tmux_profile_bgmap
tmux_profile() {
    fgcolour=${tmux_profile_fgmap[$1]:-default}
    bgcolour=${tmux_profile_bgmap[$1]:-default}
    tmux select-pane -P "bg=${bgcolour},fg=${fgcolour}"
}

# usage: tmux_add_profile name fgcolor bgcolor
tmux_add_profile() {
    tmux_profile_fgmap[$1]=${2}
    tmux_profile_bgmap[$1]=${3:-default}
}

# default tmux profiles
tmux_add_profile prod colour196
tmux_add_profile stg colour214
tmux_add_profile test colour40
tmux_add_profile dev colour33

declare -A iterm_profiles
iterm_profile() {
    profile=${iterm_profiles[$1]:-Default}
    echo -n -e "\033]50;SetProfile=${profile}\a"
}

# usage: iterm_add_profile name profilename
iterm_add_profile() {
    iterm_profiles[${1}]=${2}
}

# default iterm profiles
iterm_add_profile prod prod
iterm_add_profile stg stage
iterm_add_profile test test
iterm_add_profile dev test

profile_switch () {
    if [[ "${TERM_PROGRAM}" = "tmux" ]]; then
        # tmux pane
        tmux_profile $1
    elif [[ "${TERM_PROGRAM}" = "iTerm.app" ]]; then
        # iterm pane
        iterm_profile $1
    else
        echo "Warn: unsupported terminal (${TERM_PROGRAM}) for profile switch"
    fi
}

# load config and system specific
[[ -f ~/.localrc ]] && source ~/.localrc
setopt extendedglob

export PATH=$PATH:~/bin:$DOTFILES/bin

function source_warn {
    local -i t0 t1
    t0=$(date '+%s%3N')
    source $1
    runtime=$(($(date '+%s%3N') - $t0))
    [[ $runtime -gt $WARN_THRESHOLD ]] && echo "WARN sourcing $1 took ${runtime}ms"
}

# load all zsh and bin for enabled topics
for config_file ($DOTFILES/**/*.zsh) do
    if [[ ! $config_file =~ $DOT_EXCLUDE ]]; then
        source_warn $config_file
    fi
done
for bin ($DOTFILES/**/bin); do
    if [[ ! $bin =~ $DOT_EXCLUDE ]]; then
        export PATH=$PATH:$bin
    fi
done

# checking cached .zcompdump only once a day
autoload -Uz compinit
if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
	compinit;
else
	compinit -C;
fi;

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

[ -n ${DOTFILES_POST_INIT+1} ] && eval $DOTFILES_POST_INIT

# Update time to output extra info
if [[ `uname` == Darwin ]]; then
TIMEFMT='%J   %U  user %S system %P cpu %*E total'$'\n'\
'avg shared (code):         %X KB'$'\n'\
'avg unshared (data/stack): %D KB'$'\n'\
'total (sum):               %K KB'$'\n'\
'max memory:                %M KB'$'\n'\
'page faults from disk:     %F'$'\n'\
'other page faults:         %R'
else
TIMEFMT='%J   %U  user %S system %P cpu %*E total'$'\n'\
'avg shared (code):         %X KB'$'\n'\
'avg unshared (data/stack): %D KB'$'\n'\
'total (sum):               %K KB'$'\n'\
'max memory:                %M MB'$'\n'\
'page faults from disk:     %F'$'\n'\
'other page faults:         %R'
fi


# uncomment for profiling
#zprof
