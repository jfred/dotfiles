# my prompt
prompt_jfred_help() {
    cat <<'EOF'
    prompt jfred [color1] [color2] [color3]

    defaults green white yellow
EOF
}

prompt_jfred_precmd() {
    vcs_info
}

prompt_jfred_setup() {
    # prompt colors
    local -a pcc

    pc[1]=${1:-'green'}
    pc[2]=${2:-'grey'}
    pc[3]=${3:-'yellow'}

    setopt prompt_subst
    autoload -Uz vcs_info

    zstyle ':vcs_info:*' enable git svn hg
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' unstagedstr "%F{red}!%f"
    zstyle ':vcs_info:*' stagedstr "%F{green}+%f"

    # %b - branchname
    # %u - unstagedstr (see below)
    # %c - stangedstr (see below)
    # %a - action (e.g. rebase-i)
    zstyle ':vcs_info:*' formats "(%b%f%c%u)"
    zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-since_last_commit
    zstyle ':vcs_info:hg*+set-message:*' hooks hg-since_last_commit

    # Left hand prompt
    PROMPT=""
    # host
    PROMPT+="%F{$pc[1]}%m%f"
    # jobs
    PROMPT+="%(1j.[%j].)"
    PROMPT+=":"
    PROMPT+="%F{$pc[2]}%2c%f"
    # vcs
    PROMPT+="\${vcs_info_msg_0_}"
    # end
    PROMPT+=" %F{$pc[3]}$%f "

    # Right hand prompt
    RPROMPT=""
    export PROMPT RPROMPT

    add-zsh-hook precmd prompt_jfred_precmd
}

function format_last_commit {
    local now=`date +%s`

    local last_commit=$1
    local seconds_since_last_commit=$((now-last_commit))
    local minutes_since_last_commit=$((seconds_since_last_commit/60))

    if [ "$minutes_since_last_commit" -gt 480 ]; then
        COLOR="red"
    elif [ "$minutes_since_last_commit" -gt 20 ]; then
        COLOR="yellow"
    else
        COLOR="green"
    fi
    local time_str="${minutes_since_last_commit}m"
    if [ "$minutes_since_last_commit" -lt 120 ]; then
        time_str="$((minutes_since_last_commit))m"
    elif [ "$minutes_since_last_commit" -lt 1440 ]; then
        time_str="$((minutes_since_last_commit/60))h"
    else
        time_str="$((minutes_since_last_commit/60/24))d"
    fi
    hook_com[branch]="%F{${COLOR}}${time_str}%f|%F{cyan}${hook_com[branch]}%f"
}

function +vi-hg-since_last_commit {
    format_last_commit `hg log -l 1 --template "{hgdate(date)}\n" | cut -f1 -d' '`
}

function +vi-git-since_last_commit {
    format_last_commit `git log --pretty=format:'%at' -1`
}

function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[unstaged]+='%F{215}?%f'
    fi
}

prompt_jfred_setup "$@"

# vim:set ft=zsh:
