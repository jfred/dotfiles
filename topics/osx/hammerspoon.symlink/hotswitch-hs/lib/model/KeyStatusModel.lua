local Debugger = require("hotswitch-hs/lib/common/Debugger")
local Model = require("hotswitch-hs/lib/model/Model")
local KeyConstants = require("hotswitch-hs/lib/common/KeyConstants")

--[[
data format:

keyStatuses = {
    {
        app: "com.apple.Safari",
        key = "s",
        windowId = 123,
        window = hs.window object,
        isAutoGenerated = false,
    },
    {
        app: "com.apple.Safari",
        key = "f",
        windowId = 321,
        window = hs.window object,
        isAutoGenerated = false,
    },
    {
        app: "com.apple.mail",
        key = "m",
        windowId = 456,
        window = hs.window object,
        isAutoGenerated = false,
    },
    {
        app: "com.apple.iCal",
        key = "c",
        windowId = 789,
        window = hs.window object,
        isAutoGenerated = true,
    }
}
]]

local KeyStatusModel = {}
KeyStatusModel.new = function(windowModel, settingModel)
    local obj = Model.new()

    obj.windowModel = windowModel
    obj.settingModel = settingModel

    obj.registeredKeyStatuses = {}
    obj.registeredAndAutoGeneratedKeyStatuses = {}

    obj.specifiedAutoGeneratedKeys = nil
    obj.autoGeneratedKeys = KeyConstants.DEFAULT_AUTO_GENERATED_KEYS

    obj.createKeyStatuses = function(self)
        local settings = self.settingModel.get()

        local windowIdBasedOrderedWindows = self.windowModel:getCreatedOrderedWindows()

        local registeredKeyStatuses = {}
        local registeredAndAutoGeneratedKeyStatuses = {}

        local usedIndexOfAutoGeneratedKeys = 0
        for i = 1, #windowIdBasedOrderedWindows do
            local window = windowIdBasedOrderedWindows[i]

            local windowId = window:id()

            local bundleId = window:application():bundleID()

            local hasSettingKey = false
            for j = 1, #settings do
                local setting = settings[j]
                if setting.app == bundleId then
                    if setting.keys[1] ~= nil then
                        hasSettingKey = true

                        local keyStatus = {
                            app = bundleId,
                            windowId = windowId,
                            key = setting.keys[1],
                            window = window,
                            isAutoGenerated = false,
                        }

                        table.insert(registeredKeyStatuses, keyStatus)
                        table.insert(registeredAndAutoGeneratedKeyStatuses, keyStatus)

                        table.remove(setting.keys, 1)
                    end
                    break
                end
            end

            if hasSettingKey == false then
                if usedIndexOfAutoGeneratedKeys < #self.autoGeneratedKeys then
                    usedIndexOfAutoGeneratedKeys = usedIndexOfAutoGeneratedKeys + 1
                    table.insert(registeredAndAutoGeneratedKeyStatuses, {
                        app = bundleId,
                        windowId = windowId,
                        key = self.autoGeneratedKeys[usedIndexOfAutoGeneratedKeys],
                        window = window,
                        isAutoGenerated = true,
                    })
                end
            end
        end

        self.registeredKeyStatuses = registeredKeyStatuses
        self.registeredAndAutoGeneratedKeyStatuses = registeredAndAutoGeneratedKeyStatuses
    end

    obj.resetAutoGeneratedKeys = function(self)
        local specifiedAutoGeneratedKeys
        if self.specifiedAutoGeneratedKeys ~= nil then
            specifiedAutoGeneratedKeys = self.specifiedAutoGeneratedKeys
        else
            specifiedAutoGeneratedKeys = KeyConstants.DEFAULT_AUTO_GENERATED_KEYS
        end

        local settings = self.settingModel.get()

        local allSettingKeys = {}
        for i, setting in ipairs(settings) do
            local keys = setting.keys
            for j, key in ipairs(keys) do
                table.insert(allSettingKeys, key)
            end
        end

        local autoGeneratedKeys = {}
        for i, specifiedAutoGeneratedKey in ipairs(specifiedAutoGeneratedKeys) do
            local hasSettingKey = false
            for j, settingKey in ipairs(allSettingKeys) do
                if settingKey == specifiedAutoGeneratedKey then
                    hasSettingKey = true
                    break
                end
            end
            if hasSettingKey == false then
               table.insert(autoGeneratedKeys, specifiedAutoGeneratedKey)
            end
        end

        self.autoGeneratedKeys = autoGeneratedKeys
    end

    obj.setSpecifiedAutoGeneratedKeys = function(self, specifiedAutoGeneratedKeys)
        self.specifiedAutoGeneratedKeys = specifiedAutoGeneratedKeys
    end

    return obj
end
return KeyStatusModel