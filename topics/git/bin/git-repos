#!/usr/bin/env bash
# Checkout and fetch to ensure repos are up to date
#
# If origins is passed, check that origin matches and if not replace
#
# Expects a repos file in the current directory with the form:
#  dir:cloneurl
#
# Example:
#  mycode:git@github.com:username/code.git
#  myothercode:https://github.com/username/othercode.git

# if no repo file, try directory above current git root
if [ ! -f "repos" ]; then
    cd $(git rev-parse --show-toplevel)/../
fi


if [ ! -f "repos" ]; then
    echo $0: no repo file found
    exit 1
fi

fetch=()

if [ "$1" == "origins" ]; then
    while read repo; do
        # skip empty lines
        if [[ -z "$repo" ]]; then
            continue
        fi

        dir=$( cut -d ':' -f 1 <<< "${repo}" )
        clone=$( cut -d ':' -f 2- <<< "${repo}" )
        if [ -d "${dir}" ]; then
            echo -n checking origin for ${dir}...
            if [ "$(git -C ${dir} remote get-url origin)" != "${clone}" ]; then
                git -C ${dir} remote set-url origin ${clone}
                echo origin updated
            else
                echo origin matches
            fi
        fi
    done < repos
    exit
fi


while read repo; do
    # skip empty lines
    if [[ -z "$repo" ]]; then
        continue
    fi

    dir=$( cut -d ':' -f 1 <<< "${repo}" )
    clone=$( cut -d ':' -f 2- <<< "${repo}" )
    if [ ! -d "${dir}" ]; then
        echo Cloning ${dir}...
        git clone ${clone} ${dir}
    else
        fetch[${#fetch[@]}]=${dir}
    fi
done < repos

if [[ ${#fetch[@]} -eq 0 ]]; then
    exit
fi

for dir in "${fetch[@]}"; do
    echo running: git -C ${dir} fetch
    git -C ${dir} fetch
done
