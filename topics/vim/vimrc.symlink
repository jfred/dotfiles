set nocompatible

set encoding=utf-8

source $DOTFILES/topics/vim/plugins.vim

filetype plugin on

set backspace=indent,eol,start

let mapleader = ","
inoremap <C-j> <Esc>
inoremap <F2> <C-o>:w<CR>
nnoremap <F2> :w<CR>
nnoremap ; :
nnoremap <C-d> :q<CR>

" defaults *******************************************************************
let ctags_cmd='/usr/local/bin/ctags'

"set number
set pastetoggle=<F3>

set clipboard=unnamed

" Invisible characters *******************************************************
set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
set nolist
:noremap <Leader>i :set list!<CR> " Toggle invisible chars

" Tabs ***********************************************************************
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab
set smarttab

" Indents ********************************************************************
set autoindent
set smartindent
set cindent
set copyindent

set hidden            " allow for editied buffers in the background 
set cursorline
set nowrap
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set showmatch

set foldlevelstart=20 " Don't start folded
set history=1000      " keep 50 lines of command line history
set undolevels=1000
set wildmode=list:longest 
set wildignore=*.swp,*.bak,*.pyc,*.class,target

set nobackup          " do not keep a backup file, use versions instead
set noswapfile

if has('mouse')
    set mouse=a
    if !has('nvim')
        set ttymouse=xterm2
    endif
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
    set t_Co=256
    syntax on
    set omnifunc=syntaxcomplete#Complete
endif

if has("gui_running")
    " removes the toolbar in macvim
    set guioptions=egt
    set guioptions-=mrT
endif

" Sudo file if you must
cmap w!! %!sudo tee > /dev/null %

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Enable file type detection.
    filetype plugin indent on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
    au!

    " When editing a file, always jump to the last known cursor position.
    autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
    augroup END

    set completeopt=menuone,menu,longest
    let g:SuperTabDefaultCompletionType = "context"
endif " has("autocmd")

" Use whole "words" when opening URLs.
" This avoids cutting off parameters (after '?') and anchors (after '#'). 
" See https://vi.stackexchange.com/a/2980
let g:netrw_gx="<cWORD>"

let g:airline_powerline_fonts=0
set ttimeoutlen=50

" Navigation *****************************************************************
map <Leader>p <C-^>
" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
" Remap for history scrolling
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" ctrl-l is normally mapped as redraw so now I redraw and window naviagte
nnoremap <C-l> <C-w>l:redraw!<CR>

" NERDCommenter
" let NERDCreateDefaultMappings=0
let NERDSpaceDelims=1
map <Leader>/ <plug>NERDCommenterToggle
map <Leader>[ <plug>NERDCommenterAlignLeft
map <Leader>] <plug>NERDCommenterUncomment

" NERDTree
let NERDTreeIgnore=['\.pyc', '\.class', 'node_modules']
nmap <silent> <Leader>nt :NERDTreeToggle<CR>

" gitv
nnoremap <Leader>gV :Gitv --all<CR>
nnoremap <Leader>gv :Gitv! --all<CR>

" Nav
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <Leader>F :Unite -no-split -buffer-name=files  -start-insert file<CR>
nnoremap <Leader>f :Unite -no-split -buffer-name=files  -start-insert file_rec/git<CR>
nnoremap <Leader>r :Unite -no-split -buffer-name=files  file_mru<CR>
nnoremap <Leader>y :Unite -no-split -buffer-name=yank   history/yank<CR>
nnoremap <Leader>b :Unite -no-split -buffer-name=buffer buffer<CR>
nnoremap <Leader>g :Unite -no-split -buffer-name=grep   grep:.<CR>

" Use ag for search
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column -g'
  let g:unite_source_grep_recursive_opt = ''
endif

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

let g:unite_source_file_rec_ignore_pattern=
 \'\%(^\|/\)\.$\|\~$\|\.\%(o\|exe\|dll\|ba\?k\|sw[po]\|tmp\)$\|\%(^\|/\)\.\%(hg\|git\|bzr\|svn\|jruby\|idea\|vagrant\)\%($\|/\)\|node_modules'

" File search ****************************************************************
set incsearch         " do incremental searching
set nohlsearch        " turn off highlight searches, but:

" Turn hlsearch off/on with CTRL-N
map <silent> <C-N> :set invhlsearch<CR>

set invnumber
nmap <Leader>N :set invnumber<CR>

" tags ***********************************************************************
set tags=tags,.tags,/

nmap <F8> :TagbarToggle<CR>
execute "map <F9> :!".ctags_cmd." -f '.tags' --exclude='build' --extra=+f -R .<CR>"

" Syntax Errors
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_enable_balloons=1
let g:syntastic_python_flake8_args='--ignore=E111,E501'
let g:syntastic_always_populate_loc_list=1
let g:syntastic_enable_signs=0
let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": [] }

nmap <F2> :SyntasticCheck<CR>

" markdown
au BufRead,BufNewFile *.md set filetype=markdown

" ruby
au FileType ruby setl sw=2 sts=2 et

" coffee
au FileType coffee setl sw=2 sts=2 et

for f in split(glob('${DOTFILES}/topics/vim/lang/*.vim'), '\n')
    exe 'source' f
endfor

" Status line
set laststatus=2
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

nmap <Leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" prevent falling back on bad habits
" unmap arrow keys
nmap <right> <nop>
nmap <left> <nop>
nmap <up> <nop>
nmap <down> <nop>
imap <right> <nop>
imap <left> <nop>
imap <up> <nop>
imap <down> <nop>

" Showmarks
let g:showmarks_enable=0

" Vimux
let g:VimuxUseNearestPane = 1
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vi :VimuxInspectRunner<CR>

" Style
let g:dark_scheme = 1
function! ToggleColor()
  call SetColorScheme(!g:dark_scheme)
  AirlineRefresh
endfunction

function! SetColorScheme(darkScheme)
  if a:darkScheme
    set background=dark
    try
        colorscheme solarized
    catch /^Vim\%((\a\+)\)\=:E185/
        colorscheme desert
    endtry
    let g:airline_theme='badwolf'

    if exists('+colorcolumn')
        set colorcolumn=80,120
        highlight ColorColumn guibg=#373737 ctermbg=235
    endif

    let g:dark_scheme = 1
  else
    set background=light
    colorscheme solarized
    let g:airline_theme='light'
    let g:dark_scheme = 0
  endif
  highlight SpellBad cterm=underline,bold ctermbg=1 ctermfg=7
endfunction
call SetColorScheme(1)

+" Hack to get C-h working in neovim
if has('nvim')
    nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" system specific ************************************************************
if filereadable(expand("~/.vimrc_local"))
  source ~/.vimrc_local
endif
